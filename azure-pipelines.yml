# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

resources:
  - repo: self
    clean: true

jobs:
  - job: Phase_1
    timeoutInMinutes: 25
    displayName: Run Robot Tests and publish results
    condition: succeeded()
    pool:
      vmImage: 'macOS-11'
    steps:
      - task: Gradle@2
        inputs:
          workingDirectory: '$(system.defaultWorkingDirectory)'
          gradleWrapperFile: 'gradlew'
          gradleOptions: '-Xmx3072m'
          publishJUnitResults: false
          testResultsFiles: '**/TEST-*.xml'
          tasks: |
            'assembleDebug' 
            'build --stacktrace --info'
      - task: NodeTool@0
      - bash: |
          'npm install -g appium'
          'appium -v'
        displayName: 'install appium_server'
      - powershell: Start-Process appium -PassThru 4723
        displayName: 'start appium process'
      - task: CacheBeta@0
        displayName: 'Caching System Images for AVD'
        inputs:
          key: 'AVD_IMAGES_PIXEL_28'
          path: '$(ANDROID_HOME)/system-images'
          cacheHitVar: 'AVD_IMAGES_RESTORED'
        continueOnError: true
        condition: succeededOrFailed()
      - bash: |
          echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install 'system-images;android-28;google_apis;x86'
        displayName: 'Download and install emulator image'
        condition: ne(variables.AVD_IMAGES_RESTORED, 'true')
      - bash: |
          echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n android_emulator -k 'system-images;android-28;google_apis;x86' -d 17 --force
          echo "Emulator created successfully $(ANDROID_HOME/emulator/emulator -list-avds), launching it"
          nohup $ANDROID_HOME/emulator/emulator -avd android_emulator -skin 1080x1920 -no-snapshot -no-audio -no-boot-anim -accel auto -gpu auto -qemu -lcd-density 420 > /dev/null 2>&1 &
          $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done'
          $ANDROID_HOME/platform-tools/adb devices
          echo "Emulator started"
        displayName: 'Create and start emulator'
      - bash: |
          ./gradlew connectedDebugAndroidTest --console=plain  --stacktrace
          ./gradlew --stop
        displayName: 'Run Instrumented Tests'
        continueOnError: true
      - task: UsePythonVersion@0
        inputs: 
          versionSpec: '$(python.version)'
          architecture: 'x64'
      - script: pip install robotframework robotframework-apppiumlibrary
        displayName: 'Install dependencies'
      - powershell: |
          Write-Host "Robot Framework tests"
          robot -x 'outputxunit.xml' -t 'Your Test' '$(Build.SourcesDirectory)\[YourProjectName]\tests\.'
          failOnStderr: true
        displayName: 'Run Robot Framework Tests'
        continueOnError: true
      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        continueOnError: true
        inputs:
          testResultsFiles: outputxunit.xml
